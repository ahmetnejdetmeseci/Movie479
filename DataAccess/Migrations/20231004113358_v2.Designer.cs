// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20231004113358_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataAccess.MovieGenre", b =>
                {
                    b.Property<string>("GenreGuId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("MovieGuId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasIndex("GenreId", "GenreGuId");

                    b.HasIndex("MovieId", "MovieGuId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("DataAccess.Record", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("GuId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id", "GuId");

                    b.ToTable("Record");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Record");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataAccess.Director", b =>
                {
                    b.HasBaseType("DataAccess.Record");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRetired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.ToTable("Record", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Director_Name");
                        });

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("DataAccess.Genre", b =>
                {
                    b.HasBaseType("DataAccess.Record");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.ToTable("Record", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Genre_Name");
                        });

                    b.HasDiscriminator().HasValue("Genre");
                });

            modelBuilder.Entity("DataAccess.Movie", b =>
                {
                    b.HasBaseType("DataAccess.Record");

                    b.Property<string>("DirectorGuId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("GenreGuId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<double>("Revenue")
                        .HasColumnType("double");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasIndex("DirectorId", "DirectorGuId");

                    b.HasIndex("GenreId", "GenreGuId");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("DataAccess.MovieGenre", b =>
                {
                    b.HasOne("DataAccess.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId", "GenreGuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId", "MovieGuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("DataAccess.Movie", b =>
                {
                    b.HasOne("DataAccess.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId", "DirectorGuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Genre", null)
                        .WithMany("Movies")
                        .HasForeignKey("GenreId", "GenreGuId");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("DataAccess.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("DataAccess.Genre", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
